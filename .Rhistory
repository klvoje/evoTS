devtools::install_github("klvoje/evoTS")
devtools::install_github("klvoje/evoTS")
library(evoTS)
## Build the package for CRAN submission (then upload it to https://cran.r-project.org/submit.html, along with some comments which describe the process you followed)
devtools::build()
remove.packages("evoTS")
install.packages("~/Dropbox/GitHub/evoTS_1.0.0.tar.gz", repos = NULL, type = "source")
library(evoTS)
# This package is recommended (to run multivariate models in parallel):
library(doParallel)
setwd("~/Dropbox/Pågående prosjekter/evoTS/submission Paleobiology/resubmission paleobiology/data and scripts")
#Prepare the data for use in paleoTS and evoTS
kellog_1975<-read.table("Kellogg 1975 E. calvertense.txt", header=T)
kellog_1975.evoTS<-paleoTS::as.paleoTS(kellog_1975$mm, kellog_1975$vv, kellog_1975$N, kellog_1975$age.in.MY, oldest = "first")
# log transform the data
ln.kellog_1975.evoTS<-paleoTS::ln.paleoTS(kellog_1975.evoTS)
# Convert the time vector to unit length to ease parameter estimation
ln.kellog_1975.evoTS$tt<-ln.kellog_1975.evoTS$tt/(max(ln.kellog_1975.evoTS$tt))
# Run models withut mode shift
kellog_1975_Stasis<-paleoTS::opt.joint.Stasis(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_GRW<-paleoTS::opt.joint.GRW(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_URW<-paleoTS::opt.joint.URW(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_decel<-opt.joint.decel(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_accel<-opt.joint.accel(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_OU<-paleoTS::opt.joint.OU(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_OUBM<-opt.joint.OUBM(ln.kellog_1975.evoTS, hess = TRUE, opt.anc = TRUE)
kellog_1975_OUBM_opt.anc_F<-opt.joint.OUBM(ln.kellog_1975.evoTS, hess = TRUE, opt.anc = FALSE)
#Prepare the data for use in paleoTS and evoTS
kellog_1975<-read.table("Kellogg 1975 E. calvertense.txt", header=T)
kellog_1975.evoTS<-paleoTS::as.paleoTS(kellog_1975$mm, kellog_1975$vv, kellog_1975$N, kellog_1975$age.in.MY, oldest = "first")
# log transform the data
ln.kellog_1975.evoTS<-paleoTS::ln.paleoTS(kellog_1975.evoTS)
# Convert the time vector to unit length to ease parameter estimation
ln.kellog_1975.evoTS$tt<-ln.kellog_1975.evoTS$tt/(max(ln.kellog_1975.evoTS$tt))
# Run models withut mode shift
kellog_1975_Stasis<-paleoTS::opt.joint.Stasis(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_GRW<-paleoTS::opt.joint.GRW(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_URW<-paleoTS::opt.joint.URW(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_decel<-opt.joint.decel(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_accel<-opt.joint.accel(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_OU<-paleoTS::opt.joint.OU(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_OUBM<-opt.joint.OUBM(ln.kellog_1975.evoTS, hess = TRUE, opt.anc = TRUE)
kellog_1975_OUBM_opt.anc_F<-opt.joint.OUBM(ln.kellog_1975.evoTS, hess = TRUE, opt.anc = FALSE)
#Run models with mode shift
kellog_1975_URW.URW<-fit.mode.shift(ln.kellog_1975.evoTS, "URW", "URW", shift.point=36, hess = TRUE)
kellog_1975_URW.GRW<-fit.mode.shift(ln.kellog_1975.evoTS, "URW", "GRW", shift.point=36, hess = TRUE)
kellog_1975_OU.OU<-fit.mode.shift(ln.kellog_1975.evoTS, "OU", "OU", shift.point=36, hess=TRUE)
# The two best models:
kellog_1975_OU.OU$parameters
kellog_1975_OUBM$parameters
kellog_1975_accel
kellog_1975_OU<-paleoTS::opt.joint.OU(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_OUBM<-opt.joint.OUBM(ln.kellog_1975.evoTS, hess = TRUE, opt.anc = TRUE)
kellog_1975_OUBM_opt.anc_F<-opt.joint.OUBM(ln.kellog_1975.evoTS, hess = TRUE, opt.anc = FALSE)
kellog_1975_OUBM_opt.anc_F
# The two best models:
kellog_1975_OU.OU$parameters
kellog_1975_OUBM$parameters
##### FIGURE 2 ######
absolute.age<-abs(kellog_1975.evoTS$tt-kellog_1975.evoTS$start.age)
increment.absolute.time<-(max(absolute.age)-min(absolute.age))/5
par(mar = c(6.6,5,2,2))
plotevoTS(ln.kellog_1975.evoTS, xlab="", ylab = "Log Thoracic width (mm)", axes = FALSE)
box(bty="l")
axis(1)
axis(2)
axis(1, c(0, 0.2, 0.4, 0.6, 0.8, 1), round(c(3.78490,(3.78490-increment.absolute.time),
(3.78490-(2*increment.absolute.time)), (3.78490-(3*increment.absolute.time)),
(3.78490-(4*increment.absolute.time)), (3.78490-(5*increment.absolute.time))), 2), line = 2.5)
rect((ln.kellog_1975.evoTS$tt[35]+0.011), 4.2, (ln.kellog_1975.evoTS$tt[36]-0.011), 5.1, col = "darkgray", border = "transparent")
points(c(ln.kellog_1975.evoTS$tt[1:35]), c(ln.kellog_1975.evoTS$mm[1:35]), pch=19, col="cornflowerblue")
points(c(ln.kellog_1975.evoTS$tt[36:49]), c(ln.kellog_1975.evoTS$mm[36:49]), pch=19, col= "orange")
lines(c(ln.kellog_1975.evoTS$tt[36:49]), rep(4.37644784, 14), lty = 2, lwd = 1.5, col = "grey28")
lines(c(ln.kellog_1975.evoTS$tt[1], ln.kellog_1975.evoTS$tt[35]), c(4.52361743, 4.52361743), lty = 2, col="grey25", lwd=1.5)
mtext("Time (upper = unit length, lower = My before present)", side = 1, line = 5)
##### FIGURE 2 ######
absolute.age<-abs(kellog_1975.evoTS$tt-kellog_1975.evoTS$start.age)
increment.absolute.time<-(max(absolute.age)-min(absolute.age))/5
par(mar = c(6.6,5,2,2))
plotevoTS(ln.kellog_1975.evoTS, xlab="", ylab = "Log Thoracic width (mm)", axes = FALSE)
box(bty="l")
axis(1)
axis(2)
axis(1, c(0, 0.2, 0.4, 0.6, 0.8, 1), round(c(3.78490,(3.78490-increment.absolute.time),
(3.78490-(2*increment.absolute.time)), (3.78490-(3*increment.absolute.time)),
(3.78490-(4*increment.absolute.time)), (3.78490-(5*increment.absolute.time))), 2), line = 2.5)
rect((ln.kellog_1975.evoTS$tt[35]+0.011), 4.2, (ln.kellog_1975.evoTS$tt[36]-0.011), 5.1, col = "darkgray", border = "transparent")
points(c(ln.kellog_1975.evoTS$tt[1:35]), c(ln.kellog_1975.evoTS$mm[1:35]), pch=19, col="cornflowerblue")
points(c(ln.kellog_1975.evoTS$tt[36:49]), c(ln.kellog_1975.evoTS$mm[36:49]), pch=19, col= "orange")
lines(c(ln.kellog_1975.evoTS$tt[36:49]), rep(4.37644784, 14), lty = 2, lwd = 1.5, col = "grey28")
lines(c(ln.kellog_1975.evoTS$tt[1], ln.kellog_1975.evoTS$tt[35]), c(4.52361743, 4.52361743), lty = 2, col="grey25", lwd=1.5)
mtext("Time (upper = unit length, lower = My before present)", side = 1, line = 5)
#Divide the time series into two parts (allopatric and sympatric phases)
first_ln.kellog_1975.evoTS<-paleoTS::as.paleoTS(mm = ln.kellog_1975.evoTS$mm[1:35], vv = ln.kellog_1975.evoTS$vv[1:35], nn = ln.kellog_1975.evoTS$nn[1:35], tt = ln.kellog_1975.evoTS$tt[1:35])
second_ln.kellog_1975.evoTS<-paleoTS::as.paleoTS(mm = ln.kellog_1975.evoTS$mm[36:49], vv = ln.kellog_1975.evoTS$vv[36:49], nn = ln.kellog_1975.evoTS$nn[36:49], tt = ln.kellog_1975.evoTS$tt[36:49])
#Calculate log-likelihood surfaces
loglik.surface.OU(first_ln.kellog_1975.evoTS, seq(0,0.0025,0.0001), seq(0,0.05,0.01))
out<-matrix(NA, nrow=1000, ncol=4)
for (i in 1:1000){
partial<-sort(sample(1:35, 14, replace=FALSE))
test<-paleoTS::as.paleoTS(mm = ln.kellog_1975.evoTS$mm[partial], vv = ln.kellog_1975.evoTS$vv[partial], nn = ln.kellog_1975.evoTS$nn[partial], tt = ln.kellog_1975.evoTS$tt[partial])
out[i,]<-opt.joint.OU(test)$parameters
}
out<-matrix(NA, nrow=1000, ncol=4)
for (i in 1:1000){
partial<-sort(sample(1:35, 14, replace=FALSE))
test<-paleoTS::as.paleoTS(mm = ln.kellog_1975.evoTS$mm[partial], vv = ln.kellog_1975.evoTS$vv[partial], nn = ln.kellog_1975.evoTS$nn[partial], tt = ln.kellog_1975.evoTS$tt[partial])
out[i,]<-paleoTS::opt.joint.OU(test)$parameters
}
#vstep
median(sort(out[,2]))
#half-life
half_life<-log(2)/(out[,4])
median(half_life)
# Number of dorsal spines
Bell_Hunt_DS<-read.table("Bell et al 2006 and Hunt et al 2008 DS.txt", header=T)
ln.Bell_Hunt_DS.evoTS<-paleoTS::as.paleoTS(Bell_Hunt_DS$mm, Bell_Hunt_DS$vv, Bell_Hunt_DS$N, Bell_Hunt_DS$age, oldest = "last")
# Number of touching pterygiophores
Bell_Hunt_TP<-read.table("Bell et al 2006 and Hunt et al 2008 TP.txt", header=T)
ln.Bell_Hunt_TP.evoTS<-paleoTS::as.paleoTS(Bell_Hunt_TP$mm, Bell_Hunt_TP$vv, Bell_Hunt_TP$N, Bell_Hunt_TP$age, oldest = "last")
# Remove samples so that the two time series are of equal length
ln.Bell_Hunt_DS.evoTS<-paleoTS::as.paleoTS(Bell_Hunt_DS$mm[-c(1,3)], Bell_Hunt_DS$vv[-c(1,3)], Bell_Hunt_DS$N[-c(1,3)], Bell_Hunt_DS$age[-c(1,3)], oldest = "last")
ln.Bell_Hunt_TP.evoTS<-paleoTS::as.paleoTS(Bell_Hunt_TP$mm[-c(4)], Bell_Hunt_TP$vv[-c(3)], Bell_Hunt_TP$N[-c(3)], Bell_Hunt_TP$age[-c(3)], oldest = "last")
# Convert the time vector to unit length to ease parameter estimation
ln.Bell_Hunt_DS.evoTS$tt<-ln.Bell_Hunt_DS.evoTS$tt/(max(ln.Bell_Hunt_DS.evoTS$tt))
ln.Bell_Hunt_TP.evoTS$tt<-ln.Bell_Hunt_TP.evoTS$tt/(max(ln.Bell_Hunt_TP.evoTS$tt))
# Make multivariate data set
ln.Bell_Hunt_DS_TP<-make.multivar.evoTS(ln.Bell_Hunt_DS.evoTS, ln.Bell_Hunt_TP.evoTS)
# function to store different objects when running analyses in parallel
multiResultClass <- function(result1=NULL,result2=NULL, result3=NULL)
{
me <- list(
result1 = result1,
result2 = result2,
result3 = result3
)
class(me) <- append(class(me),"multiResultClass")
return(me)
}
# Chose the number of cores
cores <- 6
registerDoParallel(cores=cores)
start_time <- Sys.time()
independent.URW.Bell_Hunt <- foreach(i=1:100) %dopar% {
result <- multiResultClass()
seed <- (10+i)
set.seed(seed)
result$result1 <- seed
result$result2 <- fit.multivariate.URW(ln.Bell_Hunt_DS_TP, R = "diag", r = "fixed", hess = TRUE, iterations = 1)
end_time <- Sys.time(); end_time - start_time
print( end_time - start_time )
result$result3 <- end_time - start_time; print(i)
return(result)
}
print ("DONE independent.URW.Bell_Hunt")
end_time <- Sys.time(); end_time - start_time
log.lik.independent.URW.Bell_Hunt<-rep(NA, 100)
AICc.independent.URW.Bell_Hunt<-rep(NA, 100)
for (i in 1:100){
AICc.independent.URW.Bell_Hunt[i]<-independent.URW.Bell_Hunt[[i]]$result2$AICc
log.lik.independent.URW.Bell_Hunt[i]<-independent.URW.Bell_Hunt[[1]]$result2$logL
}
AICc.independent.URW.Bell_Hunt
log.lik.independent.URW.Bell_Hunt
# The model run with lowest AICc score
which.min(AICc.independent.URW.Bell_Hunt)
# Best fit among the 100 model runs
independent.URW.Bell_Hunt[which.min(AICc.independent.URW.Bell_Hunt)]
##################################
######                      ######
######   evoTS manuscript   ######
######                      ######
######    Kjetil L. Voje    ######
######                      ######
######     05 Jan 2023      ######
######                      ######
##################################
set.seed(999)
out<-matrix(NA, nrow=1000, ncol=4)
for (i in 1:1000){
partial<-sort(sample(1:35, 14, replace=FALSE))
test<-paleoTS::as.paleoTS(mm = ln.kellog_1975.evoTS$mm[partial], vv = ln.kellog_1975.evoTS$vv[partial], nn = ln.kellog_1975.evoTS$nn[partial], tt = ln.kellog_1975.evoTS$tt[partial])
out[i,]<-paleoTS::opt.joint.OU(test)$parameters
}
#vstep
median(sort(out[,2]))
#half-life
half_life<-log(2)/(out[,4])
median(half_life)
remove.packages("evoTS")
## Build the package for CRAN submission (then upload it to https://cran.r-project.org/submit.html, along with some comments which describe the process you followed)
devtools::build()
setwd("~/Dropbox/GitHub/evoTS")
## Build the package for CRAN submission (then upload it to https://cran.r-project.org/submit.html, along with some comments which describe the process you followed)
devtools::build()
setwd("~/Dropbox/Pågående prosjekter/evoTS/submission Paleobiology/resubmission paleobiology/data and scripts")
#Prepare the data for use in paleoTS and evoTS
kellog_1975<-read.table("Kellogg 1975 E. calvertense.txt", header=T)
kellog_1975.evoTS<-paleoTS::as.paleoTS(kellog_1975$mm, kellog_1975$vv, kellog_1975$N, kellog_1975$age.in.MY, oldest = "first")
# log transform the data
ln.kellog_1975.evoTS<-paleoTS::ln.paleoTS(kellog_1975.evoTS)
# Convert the time vector to unit length to ease parameter estimation
ln.kellog_1975.evoTS$tt<-ln.kellog_1975.evoTS$tt/(max(ln.kellog_1975.evoTS$tt))
# Run models withut mode shift
kellog_1975_Stasis<-paleoTS::opt.joint.Stasis(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_GRW<-paleoTS::opt.joint.GRW(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_URW<-paleoTS::opt.joint.URW(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_decel<-opt.joint.decel(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_accel<-opt.joint.accel(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_OU<-paleoTS::opt.joint.OU(ln.kellog_1975.evoTS, hess = TRUE)
kellog_1975_OUBM<-opt.joint.OUBM(ln.kellog_1975.evoTS, hess = TRUE, opt.anc = TRUE)
kellog_1975_OUBM_opt.anc_F<-opt.joint.OUBM(ln.kellog_1975.evoTS, hess = TRUE, opt.anc = FALSE)
#Run models with mode shift
kellog_1975_URW.URW<-fit.mode.shift(ln.kellog_1975.evoTS, "URW", "URW", shift.point=36, hess = TRUE)
kellog_1975_URW.GRW<-fit.mode.shift(ln.kellog_1975.evoTS, "URW", "GRW", shift.point=36, hess = TRUE)
kellog_1975_OU.OU<-fit.mode.shift(ln.kellog_1975.evoTS, "OU", "OU", shift.point=36, hess=TRUE)
# The two best models:
kellog_1975_OU.OU$parameters
kellog_1975_OUBM$parameters
##### FIGURE 2 ######
absolute.age<-abs(kellog_1975.evoTS$tt-kellog_1975.evoTS$start.age)
log(2)/18.83257831
log(2)/94.28218597
setwd("~/Dropbox/GitHub/evoTS")
## Build the package for CRAN submission (then upload it to https://cran.r-project.org/submit.html, along with some comments which describe the process you followed)
devtools::build()
## Build the package for CRAN submission (then upload it to https://cran.r-project.org/submit.html, along with some comments which describe the process you followed)
devtools::build()
